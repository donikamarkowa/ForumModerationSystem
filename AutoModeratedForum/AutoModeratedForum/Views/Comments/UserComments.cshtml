@model IEnumerable<AutoModeratedForum.Entities.Comment>
@using AutoModeratedForum.Enums
@{
    ViewData["Title"] = "My Comments";
}

<!-- Включи Bootstrap CSS и JS в твоя Layout, ако още не са включени -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
    /* Колони с ширини и стилове */
    .content-col {
        width: 50%;
        white-space: normal;
        word-wrap: break-word;
    }

    .created-col {
        width: 20%;
        white-space: nowrap;
    }

    .status-col {
        width: 15%;
        white-space: nowrap;
    }

    .notes-col {
        width: 15%;
        white-space: normal;
        word-wrap: break-word;
    }
</style>

<h2>My Comments</h2>

@if (!Model.Any())
{
    <p class="text-muted fst-italic">You have not posted any comments yet.</p>
}
else
{
    <table class="table table-striped table-hover align-middle" style="table-layout: fixed; width: 100%;">
        <thead class="table-dark">
            <tr>
                <th class="content-col">Content</th>
                <th class="created-col">Created At</th>
                <th class="status-col">Status</th>
                <th class="notes-col">Moderator Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comment in Model.OrderByDescending(c => c.CreatedAt))
            {
                string statusText;
                string statusClass;

                if (comment.ModerationRequest == null)
                {
                    statusText = "Approved";
                    statusClass = "badge bg-success";
                }
                else
                {
                    switch (comment.ModerationRequest.Decision)
                    {
                        case ModerationDecision.Pending:
                            statusText = "Pending";
                            statusClass = "badge bg-warning text-dark";
                            break;
                        case ModerationDecision.Approved:
                            statusText = "Approved";
                            statusClass = "badge bg-success";
                            break;
                        case ModerationDecision.Rejected:
                            statusText = "Rejected";
                            statusClass = "badge bg-danger";
                            break;
                        default:
                            statusText = "Unknown";
                            statusClass = "badge bg-secondary";
                            break;
                    }
                }

                <tr>
                    <td class="content-col">@comment.Content</td>
                    <td class="created-col">@comment.CreatedAt.ToLocalTime().ToString("g")</td>
                    <td class="status-col"><span class="@statusClass">@statusText</span></td>
                    <td class="notes-col">
                        @if (string.IsNullOrWhiteSpace(comment.ModerationRequest?.Notes))
                        {
                            <span class="text-muted fst-italic">No notes</span>
                        }
                        else
                        {
                            var notes = comment.ModerationRequest!.Notes;
                            var shortNotes = notes.Length > 40 ? notes.Substring(0, 40) + "…" : notes;
                            <span tabindex="0" class="text-primary" role="button" data-bs-toggle="popover" data-bs-trigger="focus" title="Moderator Notes" data-bs-content="@notes" style="cursor: pointer;">
                                📝 @shortNotes
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl)
        })
    });
</script>
